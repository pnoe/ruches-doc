On peut aussi installer ruches, tomcat et postgres avec Docker voir repository ruches-doc/docker
On peut aussi ne pas installer tomcat et utiliser le tomcat "embedded" de spring boot :
 - java -jar target/ruches.war -Dspring.datasource.url=jdbc:postgresql://localhost:5433/ruches 
                               -Dspring.datasource.username=postgres 
                               -Dspring.datasource.password=postgres
 - en ajoutant tous les paramètres à modifier par rapport à application.properties (-Dparam=xxx)
Pour l'ordre de prise en compte des paramètres dans Spring Boot, voir :
  https://docs.spring.io/spring-boot/docs/current/reference/html/features.html#features.external-config    
dans Tomcat :
   https://tomcat.apache.org/tomcat-9.0-doc/config/context.html#Defining_a_context

- Installation des paquets sur un serveur debian
  apt update
  apt upgrade -y
  # installation de tomcat, la lib pour tomcat native apr, postgres
  # git, jdk17, maven pour une génération locale du fichier war à partir des sources clonées
  apt install -y --no-install-recommends git openjdk-17-jdk maven tomcat9 libtcnative-1 postgresql
  apt clean

- Configuration Tomcat
   Copier le fichier docs/installation/server.xml sous /etc/tomcat9
   Copier le fichier docs/installation/context.xml sous /etc/tomcat9/Catalina/localhost/
 
- Clone des sources puis création du fichier war
  git clone https://gitlab.com/ruches/ruches.git
  cd ruches
  mvn clean package -DskipTests
- Copie du war sous tomcat
  cp target/ruches.war.original /var/lib/tomcat9/webapps/ruches.war

- Créer la base initiale :
    psql -c 'drop database ruches;'
    psql -c 'create database ruches;'
    psql -f sql/structure.sql ruches
    psql -f sql/ruches_donnees_min.sql ruches
    psql -c "alter user postgres with password 'postgres';"
- Définir les paramètres de l'application dans les fichiers 
    src/main/resources/application.properties
    et dans le context.xml Tomcat (voir exemple de context dans le répertoire docs/installation)
-- connexion à la base de données
   définir paramètres de connexion dans context.xml
-- logging.file : le chemin des fichiers log
-- accueil.titre : le titre à afficher dans le bandeau de la page d'accueil
-- ign.data.key : la clé de connexion à l'API IGN
-- gg.map.key : la clé de connexion à l'API Google maps
-- gg.map.url : l'URL de connexion à l'API Google maps
-- openweathermap.key : la clé de connexion à l'API openWeatherMap

- Authentification voir table Personne
 Un utilisateur "admin", mot de passe "admin" est défini dans ruches_donnees_min.sql
  
- Carte Google maps
  https://cloud.google.com/maps-platform/
  https://developers.google.com/maps/documentation/javascript/tutorial
-- L'affichage de ces cartes nécessite une clé
  Voir gg.map.key et gg.map.url dans application.properties ou context.xml
 
    
- Carte IGN
  https://geoservices.ign.fr/
	connexion
	créer nouveau login ign
  Créer une clé de service web :
	mon compte / mes clés de service web
	sélectionner usage gratuit des scan25/100/OACI
    
  Création d'un fichier autoconf :
    curl "https://wxs.ign.fr/ortho/autoconf?keys=parcellaire,agriculture,essentiels,maclé&output=json&callback=callback" > autoconf.js
    copier ce fichier autoconf.js sous ruches/WEB-INF/classes/static/js
  On peut aussi utiliser la clé directement dans le fichier context.xml : 
    	<Parameter name="ign.data.key"
		  value="parcellaire,agriculture,essentiels,laclecréée">
    mais il faut alors modifier templates/include.html pour indiquer la clé au lieu du fichier autoconf.js, remplacer 
      th:attr="data-url=@{/js/autoconf.js}"
      par
      th:data-key="${@environment.getProperty('ign.data.key')}"
		  
voir aussi :
https://geoservices.ign.fr/services-web
https://geoservices.ign.fr/services-web-issus-des-scans-ign
https://github.com/IGNF/geoportal-extensions/blob/develop/doc/README-openlayers.md
https://geoservices.ign.fr/documentation/services/utilisation-web/extension-pour-openlayers
      
- API OpenWeatherMap
  https://openweathermap.org/appid
  créer une clé et copier cette clé dans le fichier context.xml

- Composants opensource utilisés :
  -- d3 pour les graphes de descendances des essaims https://d3js.org
  -- Bootstrap responsive design https://getbootstrap.com
  -- Datatables html tables https://datatables.net
  -- jquery http://jquery.com
  -- jquery-ui https://jqueryui.com
  -- jquery.validate https://jqueryvalidation.org
  -- chartjs graphiques javascript http://www.chartjs.org 
  -- jquery.datetimepicker https://xdsoft.net/jqplugins/datetimepicker
  -- cartes ign https://github.com/IGNF/geoportal-extensions
  -- openlayers http://openlayers.org (pour l'affichage des cartes IGN et OSM)
  -- spring boot https://projects.spring.io/spring-boot
  -- ortools pour le calcul du parcours des ruches https://developers.google.com/optimization
  -- java, maven, git...
 - API utilisées
  -- OpenWeatherMap
  -- Google maps 
  -- Cartes et service IGN
  -- Cartes OpenStreetMap
  
  
